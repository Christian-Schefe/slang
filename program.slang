3;
x;

let x = {
    y: 3,
    z: 3+ 3
};

3 + 1;
-2;

x = 3;
x[2] = 2;
get()[2] = 0;

let list = [2, 3];
let list = [];
3 + -1;
3 + (3 * 2 + 6) + 1;
4 + x * 3;

let x = 5;

2 + {let x = 5; 3 + 3;} + 3;

2 + 3 if (true if true else false) else 3 + 5;

get(3);

x + (get())(3, 2) + 3 * 2;

3 * get1() if (true) else -get2() - 2;

a.x;

a.get();

-a.get();

a.get().c;

a.get().get();

 (a.get().get)();
((a.get)().get)();
(((a.get)()).get)();
 ((((a).get)()).get)();

3 + a.get().get() + x * 3;

let x = 3 + a.get().get() + x * 3;
a.get().c = 3 + a.get().get() + x * 3;
let v = |a| {
    x + 1;
    x + 2;
};
# if-else -> binary-operators -> unary-operators -> function-calls -> property-access